// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import model "a10bridge/model"

// K8sClient is an autogenerated mock type for the K8sClient type
type K8sClient struct {
	mock.Mock
}

// GetConfigMap provides a mock function with given fields: namespace, name
func (_m *K8sClient) GetConfigMap(namespace string, name string) (*model.ConfigMap, error) {
	ret := _m.Called(namespace, name)

	var r0 *model.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string) *model.ConfigMap); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngressControllers provides a mock function with given fields:
func (_m *K8sClient) GetIngressControllers() ([]*model.IngressController, error) {
	ret := _m.Called()

	var r0 []*model.IngressController
	if rf, ok := ret.Get(0).(func() []*model.IngressController); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.IngressController)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *K8sClient) GetNodes() ([]*model.Node, error) {
	ret := _m.Called()

	var r0 []*model.Node
	if rf, ok := ret.Get(0).(func() []*model.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
