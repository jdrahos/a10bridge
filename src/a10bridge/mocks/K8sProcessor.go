// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import model "a10bridge/model"

// K8sProcessor is an autogenerated mock type for the K8sProcessor type
type K8sProcessor struct {
	mock.Mock
}

// BuildEnvironment provides a mock function with given fields:
func (_m *K8sProcessor) BuildEnvironment() (*model.Environment, error) {
	ret := _m.Called()

	var r0 *model.Environment
	if rf, ok := ret.Get(0).(func() *model.Environment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildServiceGroups provides a mock function with given fields: controllers, environment
func (_m *K8sProcessor) BuildServiceGroups(controllers []*model.IngressController, environment *model.Environment) map[string]*model.ServiceGroup {
	ret := _m.Called(controllers, environment)

	var r0 map[string]*model.ServiceGroup
	if rf, ok := ret.Get(0).(func([]*model.IngressController, *model.Environment) map[string]*model.ServiceGroup); ok {
		r0 = rf(controllers, environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.ServiceGroup)
		}
	}

	return r0
}

// FindIngressControllers provides a mock function with given fields:
func (_m *K8sProcessor) FindIngressControllers() ([]*model.IngressController, error) {
	ret := _m.Called()

	var r0 []*model.IngressController
	if rf, ok := ret.Get(0).(func() []*model.IngressController); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.IngressController)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNodes provides a mock function with given fields: nodeSelectors
func (_m *K8sProcessor) FindNodes(nodeSelectors map[string]string) ([]*model.Node, error) {
	ret := _m.Called(nodeSelectors)

	var r0 []*model.Node
	if rf, ok := ret.Get(0).(func(map[string]string) []*model.Node); ok {
		r0 = rf(nodeSelectors)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(nodeSelectors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
